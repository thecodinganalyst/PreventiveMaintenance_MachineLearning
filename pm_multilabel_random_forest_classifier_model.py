import pandas as pdimport numpy as npimport pm_telemetry as pmtfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scorefrom sklearn.preprocessing import LabelEncoderfrom skmultilearn.problem_transform import BinaryRelevancepd.set_option("display.max_columns", None)# prepare datatele = pmt.PmTelemetry()tele.merge_failures()tele.merge_errors()tele.merge_maint()tele.merge_machines()tele.gen_past_hr_rolling_telemetry(24, "_24", np.mean)print("Make datetime ordinal")tele.data["dt_ordinal"] = tele.data["datetime"].apply(lambda x: x.toordinal())print("Label encode model")label_encoder = LabelEncoder()tele.data["model"] = label_encoder.fit_transform(tele.data["model"])print(tele.data.info())print(tele.data.head())# start modellingprint("Start modeling")features = ["dt_ordinal", "machineID", "volt", "pressure", "vibration", "errorID_error1",            "errorID_error2", "errorID_error3", "errorID_error4", "errorID_error5",             "comp_comp1", "comp_comp2", "comp_comp3", "comp_comp4", "model", "age",            "volt_24", "rotate_24", "vibration_24", "pressure_24"]X = tele.data[features]y = tele.data[["failure_comp1", "failure_comp2", "failure_comp3", "failure_comp4"]]X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=1)model = BinaryRelevance(RandomForestClassifier(n_estimators=100, random_state=1))model.fit(X_train, y_train)predictions = model.predict(X_valid)accuracy = accuracy_score(y_valid, predictions)print(accuracy)